#       #######                                                #
#    ###       ###                                             #
#   ##   ## ##   ##   F: build.yml                             #
#        ## ##                                                 #
#                     C: 2022/06/18 18:01:48 by:dnettoRaw      #
#   ##   ## ##   ##   U: 2022/06/30 13:32:04 by:dnettoRaw      #
#     ###########                                              #

name: Build

on: 
  push:
    branches:
      - release

jobs:
  build:
    name: ${{ matrix.kind }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ ubuntu-latest, macOs-latest, windows-latest ] 
        # os: [ self-hosted ] 

    env:
      RUST_VERSION: 1.61.0
      NODE_VERSION: 18.3
      GH_ACTIONS: true
      RUST_BACKTRACE: full

    steps:
      - name: Clone repository
        uses: actions/checkout@v2

      - name: Install rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ env.RUST_VERSION }}

      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}

      - uses: nyaa8/package-version@v1
      
      - name: install webkit2gtk (ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.0
      - name: Build application
        run: |
          yarn
          yarn tauri build
      
      - name: log 
        run: |
          echo "::set-output name=version::$(cat package.json | jq -r '.version')"
          echo ":: ${{ matrix.kind }} ${{ matrix.os }}  ${{ env.PACKAGE_VERSION }} ::"
          ls -LaR ./src-tauri
          
      - name: Release App
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v${{ env.PACKAGE_VERSION }} # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: "TAURI Templaite Realesa v${{ env.PACKAGE_VERSION }}"
          releaseBody: "See the assets to download this version and install."
          draft: true
          files: |
            src-tauri/target/release/bundle/dmg/myapp_${{ env.PACKAGE_VERSION }}_x64.dmg
            src-tauri/target/release/bundle/deb/myapp_${{ env.PACKAGE_VERSION }}_x64.deb
            src-tauri/target/release/bundle/msi/myapp_${{ env.PACKAGE_VERSION }}_x64.msi

  # setup-env:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: clone repository
  #             actions/checkout@v2
  #     - name: get version from package.json
  #       uses: nyaa8/package-version@v1 # add PACKAGE_VERSION to env
  #     - env:
  #         RUST_VERSION: 1.61.0
  #         NODE_VERSION: 18.3
  #         GH_ACTIONS: true
  #         RUST_BACKTRACE: full
  #         # PACKAGE_VERSION: 0.0.0 <-- This is the version that will be built and published
  #         APP_NAME: myapp_${{ env.PACKAGE_VERSION }}_x64 # <-- This is the name of the app that will be built and published the version will be appended to the middle of the name
  #         APP_PATH: ./src-tauri/target/release/bundle/

  # build:
  #   name: ${{ matrix.os }}
  #   needs: setup-env
  #   runs-on: ${{ matrix.os }}
  #   timeout-minutes: 60
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ ubuntu-latest, macos-latest,  windows-latest ] #
  #       # os: [ self-hosted ] 

  #   steps:
  #     - name: Install rust
  #       uses: hecrj/setup-rust-action@v1
  #       with:
  #         rust-version: ${{ env.RUST_VERSION }}

  #     - name: setup node
  #       uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
      
  #     - name: install webkit2gtk (ubuntu only)
  #       if: matrix.os == 'ubuntu-latest'
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y webkit2gtk-4.0

  #     - name: Build application
  #       run: |
  #         yarn
  #         yarn tauri build
      
  #     - name: log 
  #       run: |
  #         echo "::set-output name=version::$(cat package.json | jq -r '.version')"
  #         echo ":: ${{ matrix.os }}  ${{ env.PACKAGE_VERSION }} ::"
  #         ls -LaR ./src-tauri

  #     # - name: Release App ${{ env.PACKAGE_VERSION }}
  #     #   uses: softprops/action-gh-release@master
  #     #   env:
  #     #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     #   with:
  #     #     tagName: ${{ env.PACKAGE_VERSION }} # the action automatically replaces \_\_VERSION\_\_ with the app version
  #     #     releaseName: "TAURI Templaite Realease v${{ env.PACKAGE_VERSION }}"
  #     #     releaseBody: "See the assets to download this version and install."
  #     #     draft: true
  #     #     files: |
  #     #       src-tauri/target/release/bundle/dmg/myapp_${{ env.PACKAGE_VERSION }}_x64.dmg
  #     #       src-tauri/target/release/bundle/deb/myapp_${{ env.PACKAGE_VERSION }}_x64.deb
  #     #       src-tauri/target/release/bundle/msi/myapp_${{ env.PACKAGE_VERSION }}_x64.msi
  # create-release:
  #  runs-on: ubuntu-latest
  #  needs:
  #    - setup-env
  #    - build
  #  steps:
  #    - uses: actions/checkout@v1
  #    - name: Create Release
  #      id: create-release
  #      uses: actions/create-release@v1
  #      env:
  #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #      with:
  #        tag_name: ${{ github.ref }}
  #        release_name: ${{ github.ref }}
  #        body: Release
  #        draft: false
  #        prerelease: false
     
  #    - name: Write upload_url to file
  #      run: echo '${{ steps.create-release.outputs.upload_url }}' > upload_url.txt
     
  #    - uses: actions/upload-artifact@v2
  #      with:
  #        name: create-release
  #        path: upload_url.txt

  # upload-release:
  #    runs-on: ubuntu-latest
  #    needs: create-release
  #    strategy:
  #      matrix:
  #        include:
  #          - os: ubuntu-latest
  #            asset_name_suffix: linux.tar.gz
  #            asset_content_type: application/gzip
  #          - os: windows-latest
  #            asset_name_suffix: windows.zip
  #            asset_content_type: application/zip
  #          - os: macOS-latest
  #            asset_name_suffix: macos.tar.gz
  #            asset_content_type: application/gzip
  #    steps:
  #      - uses: actions/download-artifact@v2
  #        with:
  #          name: artifact-${{ matrix.os }}

  #      - uses: actions/download-artifact@v2
  #        with:
  #          name: create-release

  #      - id: vars
  #        run: |
  #          echo "::set-output name=upload_url::$(cat upload_url.txt)"

  #      - name: Upload Release Asset
  #        id: upload-release-asset
  #        uses: actions/upload-release-asset@v1
  #        env:
  #          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #        with:
  #          upload_url: ${{ steps.vars.outputs.upload_url }}
  #          asset_path: ${{ env.APP_NAME }}_${{ matrix.asset_name_suffix }}
  #          asset_name: ${{ env.APP_NAME }}_${{ matrix.asset_name_suffix }}
  #          asset_content_type: ${{ matrix.asset_content_type }}      
